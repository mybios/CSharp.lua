-- Generated by CSharp.lua Compiler
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local CSharpLuaLuaAst
System.usingDeclare(function (global)
  CSharpLuaLuaAst = CSharpLua.LuaAst
end)
System.namespace("CSharpLua.LuaAst", function (namespace)
  namespace.class("LuaIdentifierNameSyntax", function (namespace)
    local Empty, Placeholder, One, System1, Namespace, Class, Struct, Interface, 
    Enum, Value, This, True, False, Throw, Each, YieldReturn, 
    Object, Array, ArrayEmpty, MultiArray, Create, Add, StaticCtor, Init, 
    Ctor, Inherits, Default, SystemDefault, Property, Event, Nil, TypeOf, 
    Continue, StringChar, ToStr, SystemToString, ToEnumString, DelegateBind, IntegerDiv, IntegerDivOfNull, 
    IntegerMod, IntegerModOfNull, BitNot, BitNotOfNull, BitAnd, BitAndOfNull, BitOr, BitOrOfNull, 
    BitXor, BitXorOfNull, ShiftRight, ShiftRightOfNull, ShiftLeft, ShiftLeftOfNull, Try, Is, 
    As, Cast, Using, UsingX, Linq1, SystemLinqEnumerable, New, Format, 
    Delegate, Int, UsingDeclare, Global, Attributes, Trunc, setmetatable, getmetatable, 
    Clone, ValueType, Obj, EqualsStatic, SystemObjectEqualsStatic, DateTime, TimeSpan, AnonymousTypeCreate, 
    AnonymousType, SystemNew, StackAlloc, GenericT, Base, TupleType, ValueTupleType, ValueTupleTypeCreate, 
    LinqCast, LinqWhere, LinqSelect, LinqSelectMany, LinqOrderBy, LinqOrderByDescending, LinqThenBy, LinqThenByDescending, 
    LinqGroupBy, LinqJoin, LinqGroupJoin, Render, class, __staticCtor__, __ctor1__, __ctor2__
    __staticCtor__ = function (this)
      Empty = class:new(1, "")
      Placeholder = class:new(1, "_")
      One = class:new(2, 1)
      System1 = class:new(1, "System")
      Namespace = class:new(1, "namespace")
      Class = class:new(1, "class")
      Struct = class:new(1, "struct")
      Interface = class:new(1, "interface")
      Enum = class:new(1, "enum")
      Value = class:new(1, "value")
      This = class:new(1, "this")
      True = class:new(1, "true")
      False = class:new(1, "false")
      Throw = class:new(1, "System.throw")
      Each = class:new(1, "System.each")
      YieldReturn = class:new(1, "System.yieldReturn")
      Object = class:new(1, "System.Object")
      Array = class:new(1, "System.Array")
      ArrayEmpty = class:new(1, "System.Array.Empty")
      MultiArray = class:new(1, "System.MultiArray")
      Create = class:new(1, "System.create")
      Add = class:new(1, "Add")
      StaticCtor = class:new(1, "__staticCtor__")
      Init = class:new(1, "__init__")
      Ctor = class:new(1, "__ctor__")
      Inherits = class:new(1, "__inherits__")
      Default = class:new(1, "__default__")
      SystemDefault = class:new(1, "System.default")
      Property = class:new(1, "System.property")
      Event = class:new(1, "System.event")
      Nil = class:new(1, "nil")
      TypeOf = class:new(1, "System.typeof")
      Continue = class:new(1, "continue")
      StringChar = class:new(1, "string.char")
      ToStr = class:new(1, "ToString")
      SystemToString = class:new(1, "System.toString")
      ToEnumString = class:new(1, "ToEnumString")
      DelegateBind = class:new(1, "System.bind")
      IntegerDiv = class:new(1, "System.div")
      IntegerDivOfNull = class:new(1, "System.divOfNull")
      IntegerMod = class:new(1, "System.mod")
      IntegerModOfNull = class:new(1, "System.modOfNull")
      BitNot = class:new(1, "System.bnot")
      BitNotOfNull = class:new(1, "System.bnotOfNull")
      BitAnd = class:new(1, "System.band")
      BitAndOfNull = class:new(1, "System.bandOfNull")
      BitOr = class:new(1, "System.bor")
      BitOrOfNull = class:new(1, "System.borOfNull")
      BitXor = class:new(1, "System.xor")
      BitXorOfNull = class:new(1, "System.xorOfNull")
      ShiftRight = class:new(1, "System.sr")
      ShiftRightOfNull = class:new(1, "System.srOfNull")
      ShiftLeft = class:new(1, "System.sl")
      ShiftLeftOfNull = class:new(1, "System.slOfNull")
      Try = class:new(1, "System.try")
      Is = class:new(1, "System.is")
      As = class:new(1, "System.as")
      Cast = class:new(1, "System.cast")
      Using = class:new(1, "System.using")
      UsingX = class:new(1, "System.usingX")
      Linq1 = class:new(1, "Linq")
      SystemLinqEnumerable = class:new(1, "System.Linq.Enumerable")
      New = class:new(1, "new")
      Format = class:new(1, "Format")
      Delegate = class:new(1, "System.Delegate")
      Int = class:new(1, "System.Int")
      UsingDeclare = class:new(1, "System.usingDeclare")
      Global = class:new(1, "global")
      Attributes = class:new(1, "__attributes__")
      Trunc = class:new(1, "System.trunc")
      setmetatable = class:new(1, "setmetatable")
      getmetatable = class:new(1, "getmetatable")
      Clone = class:new(1, "__clone__")
      ValueType = class:new(1, "System.ValueType")
      Obj = class:new(1, "obj")
      EqualsStatic = class:new(1, "equalsStatic")
      SystemObjectEqualsStatic = class:new(1, "System.Object.EqualsStatic")
      DateTime = class:new(1, "System.DateTime")
      TimeSpan = class:new(1, "System.TimeSpan")
      AnonymousTypeCreate = class:new(1, "System.anonymousType")
      AnonymousType = class:new(1, "System.AnonymousType")
      SystemNew = class:new(1, "System.new")
      StackAlloc = class:new(1, "System.stackalloc")
      GenericT = class:new(1, "__genericT__")
      Base = class:new(1, "__base__")
      TupleType = class:new(1, "System.Tuple")
      ValueTupleType = class:new(1, "System.ValueTuple")
      ValueTupleTypeCreate = class:new(1, "System.valueTuple")
      LinqCast = class:new(1, "Linq.Cast")
      LinqWhere = class:new(1, "Linq.Where")
      LinqSelect = class:new(1, "Linq.Select")
      LinqSelectMany = class:new(1, "Linq.SelectMany")
      LinqOrderBy = class:new(1, "Linq.OrderBy")
      LinqOrderByDescending = class:new(1, "Linq.OrderByDescending")
      LinqThenBy = class:new(1, "Linq.ThenBy")
      LinqThenByDescending = class:new(1, "Linq.ThenByDescending")
      LinqGroupBy = class:new(1, "Linq.GroupBy")
      LinqJoin = class:new(1, "Linq.Join")
      LinqGroupJoin = class:new(1, "Linq.GroupJoin")
      this.Empty, this.Placeholder, this.One, this.System1, this.Namespace, this.Class, this.Struct, this.Interface, this.Enum, this.Value, this.This, this.True, this.False, this.Throw, this.Each, this.YieldReturn, this.Object, this.Array, this.ArrayEmpty, this.MultiArray, this.Create, this.Add, this.StaticCtor, this.Init, this.Ctor, this.Inherits, this.Default, this.SystemDefault, this.Property, this.Event, this.Nil, this.TypeOf, this.Continue, this.StringChar, this.ToStr, this.SystemToString, this.ToEnumString, this.DelegateBind, this.IntegerDiv, this.IntegerDivOfNull, this.IntegerMod, this.IntegerModOfNull, this.BitNot, this.BitNotOfNull, this.BitAnd, this.BitAndOfNull, this.BitOr, this.BitOrOfNull, this.BitXor, this.BitXorOfNull, this.ShiftRight, this.ShiftRightOfNull, this.ShiftLeft, this.ShiftLeftOfNull, this.Try, this.Is, this.As, this.Cast, this.Using, this.UsingX, this.Linq1, this.SystemLinqEnumerable, this.New, this.Format, this.Delegate, this.Int, this.UsingDeclare, this.Global, this.Attributes, this.Trunc, this.setmetatable, this.getmetatable, this.Clone, this.ValueType, this.Obj, this.EqualsStatic, this.SystemObjectEqualsStatic, this.DateTime, this.TimeSpan, this.AnonymousTypeCreate, this.AnonymousType, this.SystemNew, this.StackAlloc, this.GenericT, this.Base, this.TupleType, this.ValueTupleType, this.ValueTupleTypeCreate, this.LinqCast, this.LinqWhere, this.LinqSelect, this.LinqSelectMany, this.LinqOrderBy, this.LinqOrderByDescending, this.LinqThenBy, this.LinqThenByDescending, this.LinqGroupBy, this.LinqJoin, this.LinqGroupJoin = Empty, Placeholder, One, System1, Namespace, Class, Struct, Interface, Enum, Value, This, True, False, Throw, Each, YieldReturn, Object, Array, ArrayEmpty, MultiArray, Create, Add, StaticCtor, Init, Ctor, Inherits, Default, SystemDefault, Property, Event, Nil, TypeOf, Continue, StringChar, ToStr, SystemToString, ToEnumString, DelegateBind, IntegerDiv, IntegerDivOfNull, IntegerMod, IntegerModOfNull, BitNot, BitNotOfNull, BitAnd, BitAndOfNull, BitOr, BitOrOfNull, BitXor, BitXorOfNull, ShiftRight, ShiftRightOfNull, ShiftLeft, ShiftLeftOfNull, Try, Is, As, Cast, Using, UsingX, Linq1, SystemLinqEnumerable, New, Format, Delegate, Int, UsingDeclare, Global, Attributes, Trunc, setmetatable, getmetatable, Clone, ValueType, Obj, EqualsStatic, SystemObjectEqualsStatic, DateTime, TimeSpan, AnonymousTypeCreate, AnonymousType, SystemNew, StackAlloc, GenericT, Base, TupleType, ValueTupleType, ValueTupleTypeCreate, LinqCast, LinqWhere, LinqSelect, LinqSelectMany, LinqOrderBy, LinqOrderByDescending, LinqThenBy, LinqThenByDescending, LinqGroupBy, LinqJoin, LinqGroupJoin
    end
    __ctor1__ = function (this, valueText)
      CSharpLuaLuaAst.LuaExpressionSyntax.__ctor__(this)
      this.ValueText = valueText
    end
    __ctor2__ = function (this, v)
      __ctor1__(this, v:ToString())
    end
    Render = function (this, renderer)
      renderer:Render5(this)
    end
    class = {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaExpressionSyntax
        }
      end,
      Render = Render,
      __staticCtor__ = __staticCtor__,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)

  namespace.class("LuaPropertyOrEventIdentifierNameSyntax", function (namespace)
    local getPrefixToken, GetClone, Render, class, __ctor1__, __ctor2__
    __ctor1__ = function (this, isProperty, name)
      __ctor2__(this, isProperty, true, name)
    end
    __ctor2__ = function (this, isProperty, isGetOrAdd, name)
      this.__base__.__ctor__[1](this, "")
      this.IsProperty = isProperty
      this.IsGetOrAdd = isGetOrAdd
      this.Name = name
    end
    getPrefixToken = function (this)
      if this.IsProperty then
        return this.IsGetOrAdd and "get" --[[Tokens.Get]] or "set" --[[Tokens.Set]]
      else
        return this.IsGetOrAdd and "add" --[[Tokens.Add]] or "remove" --[[Tokens.Remove]]
      end
    end
    GetClone = function (this)
      return System.create(class:new(1, this.IsProperty, this.Name), function (default)
        default.IsGetOrAdd = this.IsGetOrAdd
      end)
    end
    Render = function (this, renderer)
      renderer:Render6(this)
    end
    class = {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaIdentifierNameSyntax
        }
      end,
      IsGetOrAdd = false,
      IsProperty = false,
      getPrefixToken = getPrefixToken,
      GetClone = GetClone,
      Render = Render,
      __ctor__ = {
        __ctor1__,
        __ctor2__
      }
    }
    return class
  end)

  namespace.class("LuaExpressionNameSyntax", function (namespace)
    local Render, __ctor__
    __ctor__ = function (this, expression)
      this.__base__.__ctor__[1](this, "")
      this.Expression = expression
    end
    Render = function (this, renderer)
      this.Expression:Render(renderer)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaIdentifierNameSyntax
        }
      end,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaSymbolNameSyntax", function (namespace)
    local Update, Render, __ctor__
    __ctor__ = function (this, identifierName)
      this.__base__.__ctor__[1](this, "")
      this.NameExpression = identifierName
    end
    Update = function (this, newName)
      this.NameExpression = CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, newName)
    end
    Render = function (this, renderer)
      this.NameExpression:Render(renderer)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaIdentifierNameSyntax
        }
      end,
      Update = Update,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)
end)
