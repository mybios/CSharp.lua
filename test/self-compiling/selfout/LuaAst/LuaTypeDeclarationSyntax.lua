-- Generated by CSharp.lua Compiler
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local CSharpLua
local CSharpLuaLuaAst
System.usingDeclare(function (global)
  CSharpLua = global.CSharpLua
  CSharpLuaLuaAst = CSharpLua.LuaAst
end)
System.namespace("CSharpLua.LuaAst", function (namespace)
  namespace.class("LuaSpeaicalGenericType", function (namespace)
    return {
      IsLazy = false
    }
  end)

  namespace.class("LuaTypeDeclarationSyntax", function (namespace)
    local getIsIgnoreExport, AddStaticReadOnlyAssignmentName, AddDocument, AddClassAttributes, AddMethodAttributes, AddFieldAttributes, AddTypeParameters, AddBaseTypes, 
    AddResultTable, AddResultTable1, AddMethod, AddInitFiled, AddField, AddPropertyOrEvent, AddProperty, AddEvent, 
    SetStaticCtor, SetStaticCtorEmpty, getIsNoneCtros, getIsInitStatementExists, AddCtor, AddInitFunction, AddStaticAssignmentNames, CheckStaticCtorFunction, 
    GetInitFunction, CheckCtorsFunction, CheckAttributes, AddAllStatementsTo, Render, __init__, __ctor__
    __init__ = function (this)
      this.local_ = CSharpLuaLuaAst.LuaLocalAreaSyntax()
      this.methodList_ = CSharpLuaLuaAst.LuaStatementListSyntax()
      this.resultTable_ = CSharpLuaLuaAst.LuaTableInitializerExpression()
      this.staticInitStatements_ = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this.staticcCtorStatements_ = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this.staticAssignmentNames_ = System.List(CSharpLuaLuaAst.LuaIdentifierNameSyntax)()
      this.initStatements_ = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      this.ctors_ = System.List(CSharpLuaLuaAst.LuaConstructorAdapterExpressionSyntax)()
      this.typeParameters_ = System.List(CSharpLuaLuaAst.LuaParameterSyntax)()
      this.attributes_ = CSharpLuaLuaAst.LuaTableInitializerExpression()
      this.document_ = CSharpLuaLuaAst.LuaDocumentStatement:new(1)
    end
    __ctor__ = function (this)
      __init__(this)
      CSharpLuaLuaAst.LuaWrapFunctionStatementSynatx.__ctor__(this)
    end
    getIsIgnoreExport = function (this)
      return this.document_:getHasIgnoreAttribute()
    end
    AddStaticReadOnlyAssignmentName = function (this, name)
      if not this.staticAssignmentNames_:Contains(name) then
        this.staticAssignmentNames_:Add(name)
      end
    end
    AddDocument = function (this, document)
      if document ~= nil then
        this.document_:Add(document)
      end
    end
    AddClassAttributes = function (this, attributes)
      AddFieldAttributes(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class, attributes)
    end
    AddMethodAttributes = function (this, name, attributes)
      AddFieldAttributes(this, name, attributes)
    end
    AddFieldAttributes = function (this, name, attributes)
      if #attributes > 0 then
        local table = CSharpLuaLuaAst.LuaTableInitializerExpression()
        table.Items:AddRange(Linq.Select(attributes, function (i)
          return CSharpLuaLuaAst.LuaSingleTableItemSyntax(i)
        end, CSharpLuaLuaAst.LuaSingleTableItemSyntax))
        local key = CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name)
        local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(key, table)
        this.attributes_.Items:Add(item)
      end
    end
    AddTypeParameters = function (this, typeParameters)
      this.typeParameters_:AddRange(typeParameters)
    end
    AddBaseTypes = function (this, baseTypes, genericArgument)
      local hasLazyGenericArgument = false
      if genericArgument ~= nil then
        if genericArgument.IsLazy then
          hasLazyGenericArgument = true
        else
          AddResultTable1(this, genericArgument.Name, genericArgument.Value)
        end
      end

      local table = CSharpLuaLuaAst.LuaTableInitializerExpression()
      table.Items:AddRange(Linq.Select(baseTypes, function (i)
        return CSharpLuaLuaAst.LuaSingleTableItemSyntax(i)
      end, CSharpLuaLuaAst.LuaSingleTableItemSyntax))
      local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
      functionExpression:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global)
      if hasLazyGenericArgument then
        functionExpression:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
        local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, genericArgument.Name, false), genericArgument.Value)
        functionExpression:AddStatement1(assignment)
      end
      functionExpression:AddStatement(CSharpLuaLuaAst.LuaReturnStatementSyntax(table))
      AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Inherits, functionExpression)
    end
    AddResultTable = function (this, name)
      local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name), name)
      this.resultTable_.Items:Add(item)
    end
    AddResultTable1 = function (this, name, value)
      local item = CSharpLuaLuaAst.LuaKeyValueTableItemSyntax(CSharpLuaLuaAst.LuaTableLiteralKeySyntax(name), value)
      this.resultTable_.Items:Add(item)
    end
    AddMethod = function (this, name, method, isPrivate, document)
      local isIgnore = document ~= nil and document:getHasIgnoreAttribute()
      if isIgnore then
        return
      end

      this.local_.Variables:Add(name)
      local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, method)
      if document ~= nil and not document:getIsEmpty() then
        this.methodList_.Statements:Add(document)
      end
      this.methodList_.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
      if not isPrivate then
        AddResultTable(this, name)
      end
    end
    AddInitFiled = function (this, name, value)
      local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, name, false)
      local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(memberAccess, value)
      this.initStatements_:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
    end
    AddField = function (this, name, value, isImmutable, isStatic, isPrivate, isReadOnly)
      if isStatic then
        if isPrivate then
          this.local_.Variables:Add(name)
          if value ~= nil then
            local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
            if isImmutable then
              this.methodList_.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
            else
              this.staticInitStatements_:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
            end
          end
        else
          if isReadOnly then
            this.local_.Variables:Add(name)
            if value ~= nil then
              if isImmutable then
                local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
                this.methodList_.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
                AddResultTable(this, name)
              else
                local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, value)
                this.staticInitStatements_:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
                this.staticAssignmentNames_:Add(name)
              end
            end
          else
            if value ~= nil then
              if isImmutable then
                AddResultTable1(this, name, value)
              else
                local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, name, false), value)
                this.staticInitStatements_:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
              end
            end
          end
        end
      else
        if value ~= nil then
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            AddInitFiled(this, name, value)
          end
        end
      end
    end
    AddPropertyOrEvent = function (this, isProperty, name, innerName, value, isImmutable, isStatic, isPrivate, typeExpression)
      local get, set
      if isProperty then
        get = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, true, true, name)
        set = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, true, false, name)
      else
        get = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, false, true, name)
        set = CSharpLuaLuaAst.LuaPropertyOrEventIdentifierNameSyntax:new(2, false, false, name)
      end

      this.local_.Variables:Add(get)
      this.local_.Variables:Add(set)
      if not isStatic then
        local default
        if isProperty then
          default = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Property
        else
          default = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Event
        end
        local initMethodIdentifier = default
        local assignment = CSharpLuaLuaAst.LuaMultipleAssignmentExpressionSyntax()
        assignment.Lefts:Add(get)
        assignment.Lefts:Add(set)
        local invocation = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(1, initMethodIdentifier)
        invocation:AddArgument(CSharpLuaLuaAst.LuaStringLiteralExpressionSyntax(innerName))
        assignment.Rights:Add(invocation)
        this.methodList_.Statements:Add(CSharpLua.Utility.ToStatement(assignment))
      else
        local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(typeExpression, innerName, false)
        local getFunction = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        local setFunction = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        if isProperty then
          getFunction:AddStatement(CSharpLuaLuaAst.LuaReturnStatementSyntax(memberAccess))
          setFunction:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value)
          local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(memberAccess, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value)
          setFunction:AddStatement(CSharpLua.Utility.ToStatement(assignment))
        else
          getFunction:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value)
          local getAssignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(memberAccess, CSharpLuaLuaAst.LuaBinaryExpressionSyntax(memberAccess, "+" --[[Tokens.Plus]], CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value))
          getFunction:AddStatement(CSharpLua.Utility.ToStatement(getAssignment))
          setFunction:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value)
          local setAssignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(memberAccess, CSharpLuaLuaAst.LuaBinaryExpressionSyntax(memberAccess, "-" --[[Tokens.Sub]], CSharpLuaLuaAst.LuaIdentifierNameSyntax.Value))
          setFunction:AddStatement(CSharpLua.Utility.ToStatement(setAssignment))
        end
        this.methodList_.Statements:Add(CSharpLua.Utility.ToStatement(CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(get, getFunction)))
        this.methodList_.Statements:Add(CSharpLua.Utility.ToStatement(CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(set, setFunction)))
      end

      if value ~= nil then
        if isStatic then
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, innerName, false), value)
            this.staticInitStatements_:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
          end
        else
          if isImmutable then
            AddResultTable1(this, name, value)
          else
            AddInitFiled(this, name, value)
          end
        end
      end

      if not isPrivate then
        AddResultTable(this, get)
        AddResultTable(this, set)
      end
    end
    AddProperty = function (this, name, innerName, value, isImmutable, isStatic, isPrivate, typeExpression)
      AddPropertyOrEvent(this, true, name, innerName, value, isImmutable, isStatic, isPrivate, typeExpression)
    end
    AddEvent = function (this, name, innerName, value, isImmutable, isStatic, isPrivate, typeExpression)
      AddPropertyOrEvent(this, false, name, innerName, value, isImmutable, isStatic, isPrivate, typeExpression)
    end
    SetStaticCtor = function (this, function_)
      assert(#this.staticcCtorStatements_ == 0)
      this.staticcCtorStatements_:AddRange(function_.Body.Statements)
    end
    SetStaticCtorEmpty = function (this)
      assert(#this.staticcCtorStatements_ == 0)
      this.staticcCtorStatements_:Add(CSharpLuaLuaAst.LuaStatementSyntax.Empty)
    end
    getIsNoneCtros = function (this)
      return #this.ctors_ == 0
    end
    getIsInitStatementExists = function (this)
      return #this.initStatements_ > 0
    end
    AddCtor = function (this, function_, isZeroParameters)
      if isZeroParameters then
        this.ctors_:Insert(0, function_)
      else
        this.ctors_:Add(function_)
      end
    end
    AddInitFunction = function (this, body, name, initFunction, isAddItem)
      this.local_.Variables:Add(name)
      body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(name, initFunction)))
      if isAddItem then
        AddResultTable(this, name)
      end
    end
    AddStaticAssignmentNames = function (this, body)
      if #this.staticAssignmentNames_ > 0 then
        local assignment = CSharpLuaLuaAst.LuaMultipleAssignmentExpressionSyntax()
        for _, identifierName in System.each(this.staticAssignmentNames_) do
          local memberAccess = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This, identifierName, false)
          assignment.Lefts:Add(memberAccess)
          assignment.Rights:Add(identifierName)
        end
        body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
      end
    end
    CheckStaticCtorFunction = function (this, body)
      local statements = System.List(CSharpLuaLuaAst.LuaStatementSyntax)()
      statements:AddRange(this.staticInitStatements_)
      statements:AddRange(this.staticcCtorStatements_)
      if #statements > 0 then
        local staticCtor = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        staticCtor:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
        staticCtor.Body.Statements:AddRange(statements)
        AddStaticAssignmentNames(this, staticCtor.Body)
        AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.StaticCtor, staticCtor, true)
      end
    end
    GetInitFunction = function (this)
      local initFuntion = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
      initFuntion:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
      initFuntion.Body.Statements:AddRange(this.initStatements_)
      return initFuntion
    end
    CheckCtorsFunction = function (this, body)
      local hasInit = #this.initStatements_ > 0
      local hasCtors = #this.ctors_ > 0

      if hasCtors then
        if hasInit then
          local initIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Init
          AddInitFunction(this, body, initIdentifier, GetInitFunction(this), false)
          for _, ctor in System.each(this.ctors_) do
            if not ctor.IsInvokeThisCtor then
              local invocationInit = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(2, initIdentifier, CSharpLuaLuaAst.LuaIdentifierNameSyntax.This)
              ctor.Body.Statements:Insert(0, CSharpLuaLuaAst.LuaExpressionStatementSyntax(invocationInit))
            end
          end
        end

        if #this.ctors_ == 1 then
          AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, CSharpLua.Utility.First(this.ctors_, CSharpLuaLuaAst.LuaConstructorAdapterExpressionSyntax), true)
        else
          local ctrosTable = CSharpLuaLuaAst.LuaTableInitializerExpression()
          local index = 1
          for _, ctor in System.each(this.ctors_) do
            local name = CSharpLuaLuaAst.LuaSyntaxNode.SpecailWord("ctor" --[[Tokens.Ctor]] .. index)
            local nameIdentifier = CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, name)
            AddInitFunction(this, body, nameIdentifier, ctor, false)
            ctrosTable.Items:Add(CSharpLuaLuaAst.LuaSingleTableItemSyntax(nameIdentifier))
            index = index + 1
          end
          AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, ctrosTable)
        end
      else
        if hasInit then
          AddInitFunction(this, body, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Ctor, GetInitFunction(this), true)
        end
      end
    end
    CheckAttributes = function (this)
      if #this.attributes_.Items > 0 then
        local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        functionExpression:AddParameter1(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global)
        functionExpression:AddStatement(CSharpLuaLuaAst.LuaReturnStatementSyntax(this.attributes_))
        AddResultTable1(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Attributes, functionExpression)
      end
    end
    AddAllStatementsTo = function (this, body)
      body.Statements:Add(this.local_)
      CheckStaticCtorFunction(this, body)
      CheckCtorsFunction(this, body)
      body.Statements:Add(this.methodList_)
      CheckAttributes(this)
      if this.IsClassUsed then
        body.Statements:Add(CSharpLua.Utility.ToStatement(CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class, this.resultTable_)))
        body.Statements:Add(CSharpLuaLuaAst.LuaReturnStatementSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class))
      else
        body.Statements:Add(CSharpLuaLuaAst.LuaReturnStatementSyntax(this.resultTable_))
      end
    end
    Render = function (this, renderer)
      if this.IsPartialMark then
        return
      end

      if getIsIgnoreExport(this) then
        return
      end

      if this.IsClassUsed then
        this.local_.Variables:Add(CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class)
      end

      this.document_:Render(renderer)
      if #this.typeParameters_ > 0 then
        local wrapFunction = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        for _, type in System.each(this.typeParameters_) do
          wrapFunction:AddParameter(type)
        end
        AddAllStatementsTo(this, wrapFunction.Body)
        this:getBody().Statements:Add(CSharpLuaLuaAst.LuaReturnStatementSyntax(wrapFunction))
      else
        AddAllStatementsTo(this, this:getBody())
      end
      CSharpLuaLuaAst.LuaWrapFunctionStatementSynatx.Render(this, renderer)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaWrapFunctionStatementSynatx
        }
      end,
      IsPartialMark = false,
      IsClassUsed = false,
      getIsIgnoreExport = getIsIgnoreExport,
      AddStaticReadOnlyAssignmentName = AddStaticReadOnlyAssignmentName,
      AddDocument = AddDocument,
      AddClassAttributes = AddClassAttributes,
      AddMethodAttributes = AddMethodAttributes,
      AddFieldAttributes = AddFieldAttributes,
      AddTypeParameters = AddTypeParameters,
      AddBaseTypes = AddBaseTypes,
      AddMethod = AddMethod,
      AddField = AddField,
      AddProperty = AddProperty,
      AddEvent = AddEvent,
      SetStaticCtor = SetStaticCtor,
      SetStaticCtorEmpty = SetStaticCtorEmpty,
      getIsNoneCtros = getIsNoneCtros,
      getIsInitStatementExists = getIsInitStatementExists,
      AddCtor = AddCtor,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaClassDeclarationSyntax", function (namespace)
    local __ctor__
    __ctor__ = function (this, name)
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Class, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaStructDeclarationSyntax", function (namespace)
    local __ctor__
    __ctor__ = function (this, name)
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Struct, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaInterfaceDeclarationSyntax", function (namespace)
    local __ctor__
    __ctor__ = function (this, name)
      this.__base__.__ctor__(this)
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Interface)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaEnumDeclarationSyntax", function (namespace)
    local Add, Render, __ctor__
    __ctor__ = function (this, fullName, name, compilationUnit)
      this.__base__.__ctor__(this)
      this.FullName = fullName
      this.CompilationUnit = compilationUnit
      this:UpdateIdentifiers(name, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Namespace, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Enum)
    end
    Add = function (this, statement)
      this.resultTable_.Items:Add(statement)
    end
    Render = function (this, renderer)
      if this.IsExport then
        this.__base__.Render(this, renderer)
      end
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTypeDeclarationSyntax
        }
      end,
      IsExport = false,
      Add = Add,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)
end)
