-- Generated by CSharp.lua Compiler
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local SystemReflection = System.Reflection
local CSharpLuaLuaAst
System.usingDeclare(function (global)
  CSharpLuaLuaAst = CSharpLua.LuaAst
end)
System.namespace("CSharpLua.LuaAst", function (namespace)
  namespace.class("LuaCompilationUnitSyntax", function (namespace)
    namespace.class("UsingDeclare", function (namespace)
      return {
        IsFromCode = false
      }
    end)
    local GetVersion, AddStatement, getIsEmpty, ImportLinq, AddImport, AddTypeDeclarationCount, AddImport1, CheckUsingDeclares, 
    Render, class, __init__, __ctor__
    __init__ = function (this)
      this.Statements = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaStatementSyntax)()
      this.importAreaStatements = CSharpLuaLuaAst.LuaStatementListSyntax()
      this.usingDeclares_ = System.List(class.UsingDeclare)()
    end
    __ctor__ = function (this, filePath)
      __init__(this)
      this.__base__.__ctor__(this)
      this.FilePath = filePath
      local info = SystemReflection.Assembly.GetExecutingAssembly():GetName()
      local versonStatement = CSharpLuaLuaAst.LuaShortCommentStatement((" Generated by {0} Compiler"):Format(info:getName()))
      AddStatement(this, versonStatement)

      local system = CSharpLuaLuaAst.LuaIdentifierNameSyntax.System1
      AddImport(this, system, system)
    end
    GetVersion = function (version)
      return ("{0}.{1}.{2}"):Format(version:getMajor(), version:getMinor(), version:getBuild())
    end
    AddStatement = function (this, statement)
      this.Statements:Add(statement)
    end
    getIsEmpty = function (this)
      return this.typeDeclarationCount_ == 0
    end
    ImportLinq = function (this)
      if not this.isImportLinq_ then
        AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax.Linq1, CSharpLuaLuaAst.LuaIdentifierNameSyntax.SystemLinqEnumerable)
        this.isImportLinq_ = true
      end
    end
    AddImport = function (this, name, value)
      this.importAreaStatements.Statements:Add(CSharpLuaLuaAst.LuaLocalVariableDeclaratorSyntax:new(2, name, value))
    end
    AddTypeDeclarationCount = function (this)
      this.typeDeclarationCount_ = this.typeDeclarationCount_ + 1
    end
    AddImport1 = function (this, prefix, newPrefix, isFromCode)
      if not this.usingDeclares_:Exists(function (i)
        return i.Prefix == prefix
      end) then
        this.usingDeclares_:Add(System.create(class.UsingDeclare(), function (default)
          default.Prefix = prefix
          default.NewPrefix = newPrefix
          default.IsFromCode = isFromCode
        end))
      end
    end
    CheckUsingDeclares = function (this)
      local imports = Linq.ToList(Linq.Where(this.usingDeclares_, function (i)
        return not i.IsFromCode
      end))
      if #imports > 0 then
        imports:Sort(function (x, y)
          return x.Prefix:CompareTo(y.Prefix)
        end)
        for _, import in System.each(imports) do
          AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, import.NewPrefix), CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, import.Prefix))
        end
      end

      local usingDeclares = Linq.ToList(Linq.Where(this.usingDeclares_, function (i)
        return i.IsFromCode
      end))
      if #usingDeclares > 0 then
        usingDeclares:Sort(function (x, y)
          return x.Prefix:CompareTo(y.Prefix)
        end)
        for _, usingDeclare in System.each(usingDeclares) do
          AddImport(this, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix))
        end

        local global = CSharpLuaLuaAst.LuaIdentifierNameSyntax.Global
        local functionExpression = CSharpLuaLuaAst.LuaFunctionExpressionSyntax()
        functionExpression:AddParameter1(global)
        for _, usingDeclare in System.each(usingDeclares) do
          if usingDeclare.Prefix ~= usingDeclare.NewPrefix then
            local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix), CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.Prefix))
            functionExpression.Body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
          else
            local right = CSharpLuaLuaAst.LuaMemberAccessExpressionSyntax(global, CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.Prefix), false)
            local assignment = CSharpLuaLuaAst.LuaAssignmentExpressionSyntax(CSharpLuaLuaAst.LuaIdentifierNameSyntax:new(1, usingDeclare.NewPrefix), right)
            functionExpression.Body.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(assignment))
          end
        end

        local invocationExpression = CSharpLuaLuaAst.LuaInvocationExpressionSyntax:new(2, CSharpLuaLuaAst.LuaIdentifierNameSyntax.UsingDeclare, functionExpression)
        this.importAreaStatements.Statements:Add(CSharpLuaLuaAst.LuaExpressionStatementSyntax(invocationExpression))
      end

      local index = this.Statements:FindIndex(function (i)
        return System.is(i, CSharpLuaLuaAst.LuaNamespaceDeclarationSyntax)
      end)
      if index ~= - 1 then
        this.Statements:Insert(index, this.importAreaStatements)
      end
    end
    Render = function (this, renderer)
      CheckUsingDeclares(this)
      renderer:Render(this)
    end
    class = {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaSyntaxNode
        }
      end,
      isImportLinq_ = false,
      typeDeclarationCount_ = 0,
      AddStatement = AddStatement,
      getIsEmpty = getIsEmpty,
      ImportLinq = ImportLinq,
      AddTypeDeclarationCount = AddTypeDeclarationCount,
      AddImport1 = AddImport1,
      Render = Render,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
