-- Generated by CSharp.lua Compiler
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local CSharpLua
local CSharpLuaLuaAst
System.usingDeclare(function (global)
  CSharpLua = global.CSharpLua
  CSharpLuaLuaAst = CSharpLua.LuaAst
end)
System.namespace("CSharpLua.LuaAst", function (namespace)
  namespace.class("LuaTableInitializerExpression", function (namespace)
    local getOpenBraceToken, getCloseBraceToken, Render, Empty, class, __staticCtor__, __init__, __ctor__
    __staticCtor__ = function (this)
      Empty = class()
      this.Empty = Empty
    end
    __init__ = function (this)
      this.Items = CSharpLuaLuaAst.LuaSyntaxList_1(CSharpLuaLuaAst.LuaTableItemSyntax)()
    end
    __ctor__ = function (this)
      __init__(this)
      this.__base__.__ctor__(this)
    end
    getOpenBraceToken = function (this)
      return "{" --[[Tokens.OpenBrace]]
    end
    getCloseBraceToken = function (this)
      return "}" --[[Tokens.CloseBrace]]
    end
    Render = function (this, renderer)
      renderer:Render26(this)
    end
    class = {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaExpressionSyntax
        }
      end,
      getOpenBraceToken = getOpenBraceToken,
      getCloseBraceToken = getCloseBraceToken,
      Render = Render,
      __staticCtor__ = __staticCtor__,
      __ctor__ = __ctor__
    }
    return class
  end)

  namespace.class("LuaTableItemSyntax", function (namespace)
    local __ctor__
    __ctor__ = function (this)
      CSharpLuaLuaAst.LuaSyntaxNode.__ctor__(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaSyntaxNode
        }
      end,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaSingleTableItemSyntax", function (namespace)
    local Render, __ctor__
    __ctor__ = function (this, expression)
      this.__base__.__ctor__(this)
      if expression == nil then
        System.throw(CSharpLua.ArgumentNullException("expression" --[[nameof(expression)]]))
      end
      this.Expression = expression
    end
    Render = function (this, renderer)
      renderer:Render27(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTableItemSyntax
        }
      end,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaTableKeySyntax", function (namespace)
    local __ctor__
    __ctor__ = function (this)
      CSharpLuaLuaAst.LuaSyntaxNode.__ctor__(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaSyntaxNode
        }
      end,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaTableExpressionKeySyntax", function (namespace)
    local getOpenBracketToken, getCloseBracketToken, Render, __ctor__
    __ctor__ = function (this, expression)
      this.__base__.__ctor__(this)
      this.Expression = expression
    end
    getOpenBracketToken = function (this)
      return "[" --[[Tokens.OpenBracket]]
    end
    getCloseBracketToken = function (this)
      return "]" --[[Tokens.CloseBracket]]
    end
    Render = function (this, renderer)
      renderer:Render29(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTableKeySyntax
        }
      end,
      getOpenBracketToken = getOpenBracketToken,
      getCloseBracketToken = getCloseBracketToken,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaTableLiteralKeySyntax", function (namespace)
    local Render, __ctor__
    __ctor__ = function (this, identifier)
      this.__base__.__ctor__(this)
      this.Identifier = identifier
    end
    Render = function (this, renderer)
      renderer:Render30(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTableKeySyntax
        }
      end,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaKeyValueTableItemSyntax", function (namespace)
    local getOperatorToken, Render, __ctor__
    __ctor__ = function (this, key, value)
      this.__base__.__ctor__(this)
      this.Key = key
      this.Value = value
    end
    getOperatorToken = function (this)
      return "=" --[[Tokens.Equals]]
    end
    Render = function (this, renderer)
      renderer:Render28(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaTableItemSyntax
        }
      end,
      getOperatorToken = getOperatorToken,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)

  namespace.class("LuaTableIndexAccessExpressionSyntax", function (namespace)
    local getOpenBracketToken, getCloseBracketToken, Render, __ctor__
    __ctor__ = function (this, expression, index)
      this.__base__.__ctor__(this)
      if expression == nil then
        System.throw(CSharpLua.ArgumentNullException("expression" --[[nameof(expression)]]))
      end
      if index == nil then
        System.throw(CSharpLua.ArgumentNullException("index" --[[nameof(index)]]))
      end
      this.Expression = expression
      this.Index = index
    end
    getOpenBracketToken = function (this)
      return "[" --[[Tokens.OpenBracket]]
    end
    getCloseBracketToken = function (this)
      return "]" --[[Tokens.CloseBracket]]
    end
    Render = function (this, renderer)
      renderer:Render31(this)
    end
    return {
      __inherits__ = function (global)
        return {
          global.CSharpLua.LuaAst.LuaExpressionSyntax
        }
      end,
      getOpenBracketToken = getOpenBracketToken,
      getCloseBracketToken = getCloseBracketToken,
      Render = Render,
      __ctor__ = __ctor__
    }
  end)
end)
