-- Generated by CSharp.lua Compiler
--[[
Copyright 2017 YANG Huan (sy.yanghuan@gmail.com).

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
]]
local System = System
local Linq = System.Linq.Enumerable
local MicrosoftCodeAnalysis = Microsoft.CodeAnalysis
local MicrosoftCodeAnalysisCSharp = Microsoft.CodeAnalysis.CSharp
local SystemIO = System.IO
local SystemReflection = System.Reflection
local SystemThreading = System.Threading
local CSharpLua
local CSharpLuaLuaSyntaxGenerator
System.usingDeclare(function (global)
  CSharpLua = global.CSharpLua
  CSharpLuaLuaSyntaxGenerator = CSharpLua.LuaSyntaxGenerator
end)
System.namespace("CSharpLua", function (namespace)
  namespace.class("Compiler", function (namespace)
    local SystemDlls, getMetas, IsCorrectSystemDll, getLibs, Do, Compile, __staticCtor__, __ctor__
    __staticCtor__ = function (this)
      SystemDlls = System.Array(System.String)("System.dll", "System.Core.dll", "System.Runtime.dll", "System.Linq.dll", "Microsoft.CSharp.dll")
    end
    __ctor__ = function (this, folder, output, lib, meta, csc, isClassic, indent, atts)
      this.folder_ = folder
      this.output_ = output
      this.libs_ = CSharpLua.Utility.Split(lib, true)
      this.metas_ = CSharpLua.Utility.Split(meta, true)
      local default
      if System.String.IsNullOrEmpty(csc) then
        default = System.Array.Empty(System.String)
      else
        default = csc:Trim():Split(59 --[[';']], 44 --[[',']], 32 --[[' ']])
      end
      this.cscArguments_ = default
      this.isNewest_ = not isClassic
      this.hasSemicolon_ = false
      local extern
      extern, this.indent_ = System.Int.TryParse(indent, nil)
      if atts ~= nil then
        this.attributes_ = CSharpLua.Utility.Split(atts, false)
      end
    end
    getMetas = function (this)
      local metas = System.create(System.List(System.String)(), function (default)
        default:Add(CSharpLua.Utility.GetCurrentDirectory("~/System.xml" --[[Compiler.kSystemMeta]]))
      end)
      metas:AddRange(this.metas_)
      return metas
    end
    IsCorrectSystemDll = function (this, path)
      local default, extern = System.try(function ()
        SystemReflection.Assembly.LoadFile(path)
        return true, true
      end, function (default)
        return true, false
      end)
      if default then
        return extern
      end
    end
    getLibs = function (this)
      local privateCorePath = System.typeof(System.Object):getAssembly():getLocation()
      local libs = System.create(System.List(System.String)(), function (default)
        default:Add(privateCorePath)
      end)

      local systemDir = SystemIO.Path.GetDirectoryName(privateCorePath)
      for _, path in System.each(SystemIO.Directory.EnumerateFiles(systemDir, "*.dll")) do
        if IsCorrectSystemDll(this, path) then
          libs:Add(path)
        end
      end

      for _, lib in System.each(this.libs_) do
        local default
        if lib:EndsWith(".dll" --[[Compiler.kDllSuffix]]) then
          default = lib
        else
          default = lib .. ".dll" --[[Compiler.kDllSuffix]]
        end
        local path = default
        if SystemIO.File.Exists(path) then
          libs:Add(path)
        else
          local file = SystemIO.Path.Combine(systemDir, SystemIO.Path.GetFileName(path))
          if not SystemIO.File.Exists(file) then
            System.throw(CSharpLua.CmdArgumentException(("-l {0} is not found"):Format(path)))
          end
        end
      end
      return libs
    end
    Do = function (this)
      Compile(this)
    end
    Compile = function (this)
      local commandLineArguments = MicrosoftCodeAnalysisCSharp.CSharpCommandLineParser.getDefault():Parse(Linq.Concat(this.cscArguments_, System.Array(System.String)("-define:__CSharpLua__")))
      local parseOptions = commandLineArguments:getParseOptions():WithDocumentationMode(1 --[[DocumentationMode.Parse]])
      local files = SystemIO.Directory.EnumerateFiles(this.folder_, "*.cs", 1 --[[SearchOption.AllDirectories]])
      local syntaxTrees = Linq.Select(files, function (file)
        return MicrosoftCodeAnalysisCSharp.CSharpSyntaxTree.ParseText(SystemIO.File.ReadAllText(file), parseOptions, file, nil, System.default(SystemThreading.CancellationToken))
      end, MicrosoftCodeAnalysis.SyntaxTree)
      local references = Linq.Select(getLibs(this), function (i)
        return MicrosoftCodeAnalysis.MetadataReference.CreateFromFile(i, System.default(MicrosoftCodeAnalysis.MetadataReferenceProperties))
      end, MicrosoftCodeAnalysis.PortableExecutableReference)
      local setting = System.create(CSharpLuaLuaSyntaxGenerator.SettingInfo(), function (default)
        default.IsNewest = this.isNewest_
        default.HasSemicolon = this.hasSemicolon_
        default:setIndent(this.indent_)
      end)
      local generator = CSharpLua.LuaSyntaxGenerator(syntaxTrees, references, commandLineArguments:getCompilationOptions(), getMetas(this), setting, this.attributes_, this.folder_)
      generator:Generate(this.output_)
    end
    return {
      isNewest_ = false,
      indent_ = 0,
      hasSemicolon_ = false,
      Do = Do,
      __staticCtor__ = __staticCtor__,
      __ctor__ = __ctor__
    }
  end)
end)
